name: Build and Deploy to Google Cloud Run
on:
  #push:
   # branches: [ main ]
  push:
    branches: [ main ]
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: skill-match
  REGION: us-east1
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CLOUD_RUN_KEY }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        #service_account_key: ${{ secrets.GCP_CLOUD_RUN_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    - name: Configure Docker to use gcloud
      run: gcloud auth configure-docker
    - name: Build Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} -f backend/Dockerfile .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }}
    - name: Deploy to Google Cloud Run
      id: deploy
      run: |
        OPERATION_ID=$(gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 8000 \
          --async \
          --set-env-vars="
                          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},
                          PINECONE_API_KEY=${{secrets.PINECONE_API_KEY }},
                          PINECONE_INDEX=${{secrets.PINECONE_INDEX}},
                          AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }},
                          GB_ACCESS_TOKEN=${{ secrets.GB_ACCESS_TOKEN }},
                          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }},
                          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }},
                          TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}" \
          --format="value(metadata.name)")
        echo "operation-id=$OPERATION_ID" >> $GITHUB_OUTPUT
        echo "✅ Deployment started asynchronously"

    - name: Wait for deployment to complete
      id: wait
      timeout-minutes: 10
      run: |
        echo "Waiting for deployment to complete..."
        # Poll for deployment status instead of using operations wait
        RETRIES=20
        RETRY_INTERVAL=30
        DEPLOYED=false
        
        for i in $(seq 1 $RETRIES); do
          echo "Checking deployment status (attempt $i/$RETRIES)..."
          STATUS=$(gcloud run services describe $SERVICE_NAME --region $REGION --format="value(status.conditions[0].status)")
          
          if [ "$STATUS" == "True" ]; then
            DEPLOYED=true
            break
          fi
          
          echo "Deployment still in progress, waiting ${RETRY_INTERVAL}s..."
          sleep $RETRY_INTERVAL
        done
        
        if [ "$DEPLOYED" == "false" ]; then
          echo "Deployment did not complete within the allocated time"
          exit 1
        fi
        
        echo "✅ Deployment finished successfully"
        
        # Get the URL of the service
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format="value(status.url)")
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Show deployed service URL 
      run: echo "Service deployed to ${{ steps.wait.outputs.url }}"