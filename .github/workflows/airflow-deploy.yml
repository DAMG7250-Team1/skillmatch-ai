name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Lint code
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run tests
        run: |
          pytest backend/tests/

      - name: Build Docker images
        run: |
          docker-compose build

  deploy:
    needs: build-and-test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set environment variables
        run: |
          echo "ECR_REPOSITORY=skillmatch-airflow" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Build and push the base image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create directory structure if it doesn't exist
            mkdir -p ~/skillmatch-ai/logs ~/skillmatch-ai/plugins

            # Pull down docker-compose.yml
            aws s3 cp s3://skillmatch-deployment/docker-compose.yml ~/skillmatch-ai/docker-compose.yml

            # Set necessary environment variables
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            export PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}
            export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            export GOOGLE_EMAIL=${{ secrets.GOOGLE_EMAIL }}
            export GOOGLE_PASSWORD=${{ secrets.GOOGLE_PASSWORD }}
            export AIRFLOW_UID=$(id -u)
            
            # Pull the latest images
            cd ~/skillmatch-ai
            docker-compose pull
            
            # Start or restart the services
            docker-compose down
            docker-compose up -d

      - name: Send notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: SkillMatch AI Deployment
          SLACK_MESSAGE: "Deployment to ${{ github.event.inputs.environment || 'dev' }} ${{ job.status }}" 